'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _reactDom = require('react-dom');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _addEventListener = require('rc-util/lib/Dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _Track = require('./Track');

var _Track2 = _interopRequireDefault(_Track);

var _Handle = require('./Handle');

var _Handle2 = _interopRequireDefault(_Handle);

var _Scale = require('./Scale');

var _Scale2 = _interopRequireDefault(_Scale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function noop() {}

function isNotTouchEvent(e) {
  return e.touches.length > 1 || e.type.toLowerCase() === 'touchend' && e.touches.length > 0;
}

function getTouchPosition(e) {
  return e.touches[0].pageX;
}

function getMousePosition(e) {
  return e.pageX;
}

function getHandleCenterPosition(handle) {
  var coords = handle.getBoundingClientRect();
  return coords.left + coords.width * 0.5;
}

function getPrecision(step) {
  var stepString = step.toString();
  var precision = 0;
  if (stepString.indexOf('.') >= 0) {
    precision = stepString.length - stepString.indexOf('.') - 1;
  }
  return precision;
}

function isValueOutOfBounds(value, _ref) {
  var min = _ref.min,
      max = _ref.max;

  return value < min || value > max;
}

function pauseEvent(e) {
  e.stopPropagation();
  e.preventDefault();
}

var Slider = function (_React$Component) {
  (0, _inherits3["default"])(Slider, _React$Component);

  function Slider(props) {
    (0, _classCallCheck3["default"])(this, Slider);

    var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

    _this.onTouchStart = _this.onTouchStart.bind(_this);
    _this.onMouseDown = _this.onMouseDown.bind(_this);

    var min = props.min,
        max = props.max,
        step = props.step;

    var initialValue = min;
    var defaultValue = 'defaultValue' in props ? props.defaultValue : initialValue;
    var value = props.value !== undefined ? props.value : defaultValue;

    var bounds = [min, value].map(function (v) {
      return _this.trimAlignValue(v);
    });

    var recent = bounds.length - 1;

    if (process.env.NODE_ENV !== 'production' && step && Math.floor(step) === step && (max - min) % step !== 0) {
      (0, _warning2["default"])(false, 'Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)', max - min, step);
    }

    _this.state = {
      handle: null,
      recent: recent,
      bounds: bounds
    };
    return _this;
  }

  Slider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!('value' in nextProps || 'min' in nextProps || 'max' in nextProps)) return;

    var bounds = this.state.bounds;

    var value = nextProps.value !== undefined ? nextProps.value : bounds[1];
    var nextValue = this.trimAlignValue(value, nextProps);
    if (nextValue === bounds[1] && bounds[0] === nextProps.min) return;

    this.setState({ bounds: [nextProps.min, nextValue] });
    if (isValueOutOfBounds(bounds[1], nextProps)) {
      this.props.onChange(nextValue);
    }
  };

  Slider.prototype.onChange = function onChange(state) {
    var props = this.props;
    var isNotControlled = !('value' in props);
    if (isNotControlled) {
      this.setState(state);
    } else if (state.handle !== undefined) {
      this.setState({ handle: state.handle });
    }

    var data = (0, _extends3["default"])({}, this.state, state);
    props.onChange(data.bounds[1]);
  };

  Slider.prototype.onMouseDown = function onMouseDown(e) {
    if (e.button !== 0) {
      return;
    }

    var position = getMousePosition(e);
    if (!this.isEventFromHandle(e)) {
      this.dragOffset = 0;
    } else {
      var handlePosition = getHandleCenterPosition(e.target);
      this.dragOffset = position - handlePosition;
      position = handlePosition;
    }
    this.onStart(position);
    this.addDocumentEvents('mouse');
    pauseEvent(e);
  };

  Slider.prototype.onMouseMove = function onMouseMove(e) {
    var position = getMousePosition(e);
    this.onMove(e, position - this.dragOffset);
  };

  Slider.prototype.onMove = function onMove(e, position) {
    pauseEvent(e);
    var props = this.props;
    var state = this.state;

    var diffPosition = position - this.startPosition;
    var diffValue = diffPosition / this.getSliderLength() * (props.max - props.min);

    var value = this.trimAlignValue(this.startValue + diffValue);
    var oldValue = state.bounds[state.handle];
    if (value === oldValue) return;

    var nextBounds = [].concat((0, _toConsumableArray3["default"])(state.bounds));
    nextBounds[state.handle] = value;
    var nextHandle = state.handle;
    this.onChange({
      handle: nextHandle,
      bounds: nextBounds
    });
  };

  Slider.prototype.onStart = function onStart(position) {
    var props = this.props;
    props.onBeforeChange(this.getValue());

    var value = this.calcValueByPos(position);
    this.startValue = value;
    this.startPosition = position;

    var state = this.state;

    var valueNeedChanging = 1;

    this.setState({
      handle: valueNeedChanging,
      recent: valueNeedChanging
    });

    var oldValue = state.bounds[valueNeedChanging];
    if (value === oldValue) return;

    var nextBounds = [].concat((0, _toConsumableArray3["default"])(state.bounds));
    nextBounds[valueNeedChanging] = value;
    this.onChange({ bounds: nextBounds });
  };

  Slider.prototype.onTouchMove = function onTouchMove(e) {
    if (isNotTouchEvent(e)) {
      this.end('touch');
      return;
    }

    var position = getTouchPosition(e);
    this.onMove(e, position - this.dragOffset);
  };

  Slider.prototype.onTouchStart = function onTouchStart(e) {
    if (isNotTouchEvent(e)) return;

    var position = getTouchPosition(e);
    if (!this.isEventFromHandle(e)) {
      this.dragOffset = 0;
    } else {
      var handlePosition = getHandleCenterPosition(e.target);
      this.dragOffset = position - handlePosition;
      position = handlePosition;
    }
    this.onStart(position);
    this.addDocumentEvents('touch');
    pauseEvent(e);
  };

  Slider.prototype.getSliderLength = function getSliderLength() {
    var slider = this.slider;
    if (!slider) {
      return 0;
    }

    return slider.clientWidth;
  };

  Slider.prototype.getSliderStart = function getSliderStart() {
    var slider = this.slider;
    var rect = slider.getBoundingClientRect();

    return rect.left;
  };

  Slider.prototype.getValue = function getValue() {
    var bounds = this.state.bounds;

    return bounds[1];
  };

  Slider.prototype.addDocumentEvents = function addDocumentEvents(type) {
    if (type === 'touch') {
      // just work for chrome iOS Safari and Android Browser
      this.onTouchMoveListener = (0, _addEventListener2["default"])(document, 'touchmove', this.onTouchMove.bind(this));
      this.onTouchUpListener = (0, _addEventListener2["default"])(document, 'touchend', this.end.bind(this, 'touch'));
    } else if (type === 'mouse') {
      this.onMouseMoveListener = (0, _addEventListener2["default"])(document, 'mousemove', this.onMouseMove.bind(this));
      this.onMouseUpListener = (0, _addEventListener2["default"])(document, 'mouseup', this.end.bind(this, 'mouse'));
    }
  };

  Slider.prototype.calcOffset = function calcOffset(value) {
    var _props = this.props,
        min = _props.min,
        max = _props.max;

    var ratio = (value - min) / (max - min);
    return ratio * 100;
  };

  Slider.prototype.calcValue = function calcValue(offset) {
    var _props2 = this.props,
        min = _props2.min,
        max = _props2.max;

    var ratio = Math.abs(offset / this.getSliderLength());
    var value = ratio * (max - min) + min;
    return value;
  };

  Slider.prototype.calcValueByPos = function calcValueByPos(position) {
    var pixelOffset = position - this.getSliderStart();
    var nextValue = this.trimAlignValue(this.calcValue(pixelOffset));
    return nextValue;
  };

  Slider.prototype.end = function end(type) {
    this.removeEvents(type);
    this.props.onAfterChange(this.getValue());
    this.setState({ handle: null });
  };

  Slider.prototype.isEventFromHandle = function isEventFromHandle(e) {
    var _this2 = this;

    return this.state.bounds.some(function (x, i) {
      return _this2['handle-' + i] && e.target === (0, _reactDom.findDOMNode)(_this2['handle-' + i]);
    });
  };

  Slider.prototype.removeEvents = function removeEvents(type) {
    if (type === 'touch') {
      this.onTouchMoveListener.remove();
      this.onTouchUpListener.remove();
    } else if (type === 'mouse') {
      this.onMouseMoveListener.remove();
      this.onMouseUpListener.remove();
    }
  };

  Slider.prototype.trimAlignValue = function trimAlignValue(v, nextProps) {
    var state = this.state || {};
    var handle = state.handle,
        bounds = state.bounds;

    var _props3 = (0, _extends3["default"])({}, this.props, nextProps || {}),
        marks = _props3.marks,
        step = _props3.step,
        min = _props3.min,
        max = _props3.max;

    var val = v;
    if (val <= min) {
      val = min;
    }
    if (val >= max) {
      val = max;
    }
    /* eslint-disable eqeqeq */
    if (handle != null && handle > 0 && val <= bounds[handle - 1]) {
      val = bounds[handle - 1];
    }
    if (handle != null && handle < bounds.length - 1 && val >= bounds[handle + 1]) {
      val = bounds[handle + 1];
    }
    /* eslint-enable eqeqeq */

    var points = Object.keys(marks).map(parseFloat);
    if (step !== null) {
      var closestStep = Math.round((val - min) / step) * step + min;
      points.push(closestStep);
    }

    var diffs = points.map(function (point) {
      return Math.abs(val - point);
    });
    var closestPoint = points[diffs.indexOf(Math.min.apply(Math, (0, _toConsumableArray3["default"])(diffs)))];

    return step !== null ? parseFloat(closestPoint.toFixed(getPrecision(step))) : closestPoint;
  };

  Slider.prototype.render = function render() {
    var _this3 = this,
        _classNames3;

    var _state = this.state,
        handle = _state.handle,
        bounds = _state.bounds;
    var _props4 = this.props,
        className = _props4.className,
        prefixCls = _props4.prefixCls,
        disabled = _props4.disabled,
        dots = _props4.dots,
        included = _props4.included,
        step = _props4.step,
        marks = _props4.marks,
        max = _props4.max,
        min = _props4.min,
        children = _props4.children,
        showTrack = _props4.showTrack;


    var customHandle = this.props.handle;

    var offsets = bounds.map(function (v) {
      return _this3.calcOffset(v);
    });

    var handleClassName = prefixCls + '-handle';

    var handlesClassNames = bounds.map(function (v, i) {
      var _classNames;

      return (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, handleClassName, true), (0, _defineProperty3["default"])(_classNames, handleClassName + '-' + (i + 1), true), (0, _defineProperty3["default"])(_classNames, handleClassName + '-lower', i === 0), (0, _defineProperty3["default"])(_classNames, handleClassName + '-upper', i === bounds.length - 1), _classNames));
    });

    var commonHandleProps = {
      prefixCls: prefixCls
    };

    var handles = bounds.map(function (v, i) {
      return (0, _react.cloneElement)(customHandle, (0, _extends3["default"])({}, commonHandleProps, {
        className: handlesClassNames[i],
        value: v,
        offset: offsets[i],
        dragging: handle === i,
        index: i,
        key: i,
        ref: function ref(elem) {
          _this3['handle-' + i] = elem;
        }
      }));
    });
    handles.shift();

    var isIncluded = included;

    var tracks = [];
    if (showTrack) {
      for (var i = 1; i < bounds.length; i += 1) {
        var _classNames2;

        var trackClassName = (0, _classnames2["default"])((_classNames2 = {}, (0, _defineProperty3["default"])(_classNames2, prefixCls + '-track', true), (0, _defineProperty3["default"])(_classNames2, prefixCls + '-track-' + i, true), _classNames2));
        tracks.push(_react2["default"].createElement(_Track2["default"], {
          className: trackClassName, included: isIncluded,
          offset: offsets[i - 1], length: offsets[i] - offsets[i - 1], key: i
        }));
      }
    }

    var sliderClassName = (0, _classnames2["default"])((_classNames3 = {}, (0, _defineProperty3["default"])(_classNames3, prefixCls, true), (0, _defineProperty3["default"])(_classNames3, prefixCls + '-with-marks', Object.keys(marks).length), (0, _defineProperty3["default"])(_classNames3, prefixCls + '-disabled', disabled), (0, _defineProperty3["default"])(_classNames3, className, !!className), _classNames3));

    return _react2["default"].createElement(
      'div',
      {
        ref: function ref(slider) {
          _this3.slider = slider;
        }, className: sliderClassName,
        onTouchStart: disabled ? noop : this.onTouchStart,
        onMouseDown: disabled ? noop : this.onMouseDown
      },
      _react2["default"].createElement(_Scale2["default"], {
        prefixCls: prefixCls, marks: marks, dots: dots, step: step,
        included: isIncluded, handles: handles, tracks: tracks, lowerBound: bounds[0],
        upperBound: bounds[bounds.length - 1], max: max, min: min
      }),
      children
    );
  };

  return Slider;
}(_react2["default"].Component);

Slider.propTypes = {
  min: _propTypes2["default"].number,
  max: _propTypes2["default"].number,
  step: _propTypes2["default"].number,
  defaultValue: _propTypes2["default"].number,
  value: _propTypes2["default"].number,
  marks: _propTypes2["default"].objectOf(_propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])),
  included: _propTypes2["default"].bool,
  className: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  disabled: _propTypes2["default"].bool,
  children: _propTypes2["default"].element,
  onChange: _propTypes2["default"].func,
  onAfterChange: _propTypes2["default"].func,
  handle: _propTypes2["default"].element,
  dots: _propTypes2["default"].bool,
  showTrack: _propTypes2["default"].bool
};

Slider.defaultProps = {
  prefixCls: 'rc-slider',
  className: '',
  min: 0,
  max: 100,
  step: 1,
  marks: {},
  handle: _react2["default"].createElement(_Handle2["default"], null),
  onBeforeChange: noop,
  onChange: noop,
  onAfterChange: noop,
  included: true,
  disabled: false,
  dots: false,
  showTrack: true
};

exports["default"] = Slider;
module.exports = exports['default'];