'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function calcPoints(marks, dots, step, min, max) {
  (0, _warning2["default"])(dots ? step > 0 : true, '`Slider[step]` should be a positive number in order to make Slider[dots] work.');
  var points = Object.keys(marks).map(parseFloat);
  if (dots) {
    for (var i = min; i <= max; i += step) {
      if (!(points.indexOf(i) >= 0)) {
        points.push(i);
      }
    }
  }
  return points;
}

var createMarks = function createMarks(className, marks, included, upperBound, lowerBound) {
  var marksKeys = Object.keys(marks);

  return marksKeys.map(parseFloat).sort(function (a, b) {
    return a - b;
  }).map(function (point) {
    var _classNames;

    var isActived = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
    var markClassName = (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, className + '-text', true), (0, _defineProperty3["default"])(_classNames, className + '-text-active', isActived), _classNames));

    var markPoint = marks[point];
    var markPointIsObject = (typeof markPoint === 'undefined' ? 'undefined' : (0, _typeof3["default"])(markPoint)) === 'object' && !_react2["default"].isValidElement(markPoint);
    var markLabel = markPointIsObject ? markPoint.label : markPoint;
    return _react2["default"].createElement(
      'span',
      { className: markClassName, key: point },
      markLabel
    );
  });
};

var Scale = function Scale(_ref) {
  var prefixCls = _ref.prefixCls,
      marks = _ref.marks,
      dots = _ref.dots,
      step = _ref.step,
      included = _ref.included,
      handles = _ref.handles,
      tracks = _ref.tracks,
      lowerBound = _ref.lowerBound,
      upperBound = _ref.upperBound,
      max = _ref.max,
      min = _ref.min;

  var dotElements = calcPoints(marks, dots, step, min, max).map(function (point) {
    var _classNames2;

    var isActive = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
    var pointClassName = (0, _classnames2["default"])((_classNames2 = {}, (0, _defineProperty3["default"])(_classNames2, prefixCls + '-dot', true), (0, _defineProperty3["default"])(_classNames2, prefixCls + '-dot-active', isActive), _classNames2));

    return _react2["default"].createElement('span', { className: pointClassName });
  });

  var markElements = createMarks(prefixCls + '-mark', marks, included, upperBound, lowerBound);

  var scaleElements = dotElements.map(function (dotNode, index) {
    return _react2["default"].createElement(
      'div',
      {
        className: prefixCls + '-scaleElement',
        style: { width: 100 / dotElements.length + '%' },
        key: index
      },
      dotNode,
      markElements[index]
    );
  });

  var scaleElementsWidthFactor = 1 / (1 - 1 / scaleElements.length);
  var sclaeElementsMarginFactor = (1 - scaleElementsWidthFactor) / 2;

  var scaleElementsStyle = {
    width: scaleElementsWidthFactor * 100 + '%',
    marginLeft: sclaeElementsMarginFactor * 100 + '%'
  };

  return _react2["default"].createElement(
    'div',
    { className: prefixCls + '-scale' },
    handles,
    _react2["default"].createElement('div', { className: prefixCls + '-rail' }),
    tracks,
    _react2["default"].createElement(
      'div',
      { className: prefixCls + '-scaleElements', style: scaleElementsStyle },
      scaleElements
    )
  );
};

Scale.propTypes = {
  prefixCls: _propTypes2["default"].string,
  marks: _propTypes2["default"].objectOf(_propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])),
  dots: _propTypes2["default"].bool,
  step: _propTypes2["default"].number,
  included: _propTypes2["default"].bool,
  handles: _propTypes2["default"].node,
  tracks: _propTypes2["default"].node,
  lowerBound: _propTypes2["default"].number,
  upperBound: _propTypes2["default"].number,
  max: _propTypes2["default"].number,
  min: _propTypes2["default"].number
};

exports["default"] = Scale;
module.exports = exports['default'];